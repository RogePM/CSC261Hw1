Microsoft (R) Macro Assembler Version 14.41.34123.0	    10/11/24 23:33:42
example.asm						     Page 1 - 1


				; Calculates expression -(x+y - 2z + 1)
				; Author:  Rogelio Perez
				; Date:    11/11/2024

				.586
				.MODEL FLAT

				INCLUDE io.h                                ; header file for input/output
			      C ; IO.H -- header file for I/O macros (listing suppressed)
			      C .NOLIST      ; turn off listing
			      C .LIST        ; begin listing
			      C 

				.STACK 4096

 00000000			.DATA
 00000000 00000000		x DWORD   ?                                 ; variable to store x   
 00000004 00000000		y DWORD   ?                                 ; variable to store y
 00000008 00000000		z DWORD   ?                                 ; variable to store z

 0000000C 45 6E 74 65 72	prompt1 BYTE    "Enter a number for x", 0   ; prompt for x
	   20 61 20 6E 75
	   6D 62 65 72 20
	   66 6F 72 20 78
	   00
 00000021 45 6E 74 65 72	prompt2 BYTE    "Enter a number for y", 0   ; prompt for y
	   20 61 20 6E 75
	   6D 62 65 72 20
	   66 6F 72 20 79
	   00
 00000036 45 6E 74 65 72	prompt3 BYTE    "Enter a number for z", 0   ; prompt for z
	   20 61 20 6E 75
	   6D 62 65 72 20
	   66 6F 72 20 7A
	   00
 0000004B  00000028 [		string  BYTE    40 DUP (?)                  ; buffer to store ASCII values
	    00
	   ]
 00000073 54 68 65 20 72	resultLbl BYTE  "The result is", 0          ; prompt for the result display
	   65 73 75 6C 74
	   20 69 73 00
 00000081  0000000B [		sum     BYTE    11 DUP (?), 0               ; result in ASCII
	    00
	   ] 00

 00000000			.CODE
 00000000			_MainProc PROC
				        input   prompt1, string, 40         ; read ASCII characters
				        atod    string                      ; convert to integer
 0000002D  A3 00000000 R	        mov     x, eax                      ; store in memory

				        input   prompt2, string, 40         ; repeat for second number
				        atod    string
 0000005F  A3 00000004 R	        mov     y, eax

				        input   prompt3, string, 40         ; repeat for third number
				        atod    string
 00000091  A3 00000008 R	        mov     z, eax
				        

 00000096  A1 00000000 R	        mov     eax, x                      ; first number to EAX (=x)
 0000009B  03 05 00000004 R	        add     eax, y                      ; result := x+y
 000000A1  8B 1D 00000008 R	        mov     ebx, z                      ; temp := z
 000000A7  03 DB		        add     ebx, ebx                    ; temp := 2*z
 000000A9  2B C3		        sub     eax, ebx                    ; result := x + y - 2z
 000000AB  40			        inc     eax                         ; result := x + y - 2z + 1 
 000000AC  F7 D8		        neg     eax                         ; result := -(x + y - 2z + 1)

				        dtoa    sum, eax                    ; convert to ASCII characters
				        output  resultLbl, sum              ; output label and sum

 000000DF  B8 00000000		        mov     eax, 0                      ; exit with return code 0
 000000E4  C3			        ret

 000000E5			_MainProc ENDP
				END                                         ; end of source code

Microsoft (R) Macro Assembler Version 14.41.34123.0	    10/11/24 23:33:42
example.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

atod . . . . . . . . . . . . . .	Proc
atow . . . . . . . . . . . . . .	Proc
dtoa . . . . . . . . . . . . . .	Proc
input  . . . . . . . . . . . . .	Proc
output . . . . . . . . . . . . .	Proc
wtoa . . . . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000008D Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000000E5 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

_MainProc  . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E5 Public


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000000h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
_getInput  . . . . . . . . . . .	L Near	 00000000 FLAT	External
_showOutput  . . . . . . . . . .	L Near	 00000000 FLAT	External
atodproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
atowproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
dtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
prompt1  . . . . . . . . . . . .	Byte	 0000000C _DATA	
prompt2  . . . . . . . . . . . .	Byte	 00000021 _DATA	
prompt3  . . . . . . . . . . . .	Byte	 00000036 _DATA	
resultLbl  . . . . . . . . . . .	Byte	 00000073 _DATA	
string . . . . . . . . . . . . .	Byte	 0000004B _DATA	
sum  . . . . . . . . . . . . . .	Byte	 00000081 _DATA	
wtoaproc . . . . . . . . . . . .	L Near	 00000000 FLAT	External
x  . . . . . . . . . . . . . . .	DWord	 00000000 _DATA	
y  . . . . . . . . . . . . . . .	DWord	 00000004 _DATA	
z  . . . . . . . . . . . . . . .	DWord	 00000008 _DATA	

	   0 Warnings
	   0 Errors
